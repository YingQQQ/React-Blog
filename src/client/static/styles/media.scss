@charset "utf-8";
$breakpoints: (phone: 320px, tablet: 768px, desktop: 1200px)  !default;
$media-expressions: (screen: "screen",
                    print: "print",
                    handheld: "handheld",
                    retina2x: ("(-webkit-min-device-pixel-ratio: 2)", "(min-resolution: 192dpi)"),
                    retina3x: ("(-webkit-min-device-pixel-ratio: 3)", "(min-resolution: 350dpi)")
                    ) !default;


@function parse-expression($expression) {
	$operator : '';
	$value : '';
	$element : '';
	$result : '';
	$is-width : true;




	@if(str-slice($expression, 2, 2) == "=") {
		$operator : str-slice($expression, 1, 2);
		$value : str-slice($expression, 3);
	}@else{
		$operator : str-slice($expression, 1, 1);
		$value : str-slice($expression, 2);
	}




	@if map-has-key($breakpoints, $value){
		$result : map-get($breakpoints,$value);
	}@else if map-has-key($media-expressions, $expression){
		$result : map-get($media-expressions,$expression);
		$is-width : false;
	}@else{
		$result : to-number($value);
	}

	@if(is-width){
		@if($operator == '>'){
			$element:'(min-width : #{$result + 1})';
		}@else if($operator == '<'){
			$element:'(max-width : #{$result - 1})';
		}@else if($operator == '>='){
			$element:'(min-width : #{$result})';
		}@else if($operator == '<='){
			$element:'(max-width : #{$result})';
		}
	}@else{
		$element :$result;
	}

	@return $element;
}




@function get-query-branches($expressions) {
	$result : '';
	$has-groups : false;
	@each $expression in $expressions {
		@if(str-length($result) != 0) {
			$result : $result + ' and ';
		}
		@if(type-of ($expression) == 'string') {
			$result : $result + $expression;
		}@else if (type-of($expression) == 'list') {
			$result : $result + nth($expression, 1);
			$has-groups: true;
		}
	}

	@if $has-groups {
		@each $expression in $expressions {
			@if (type-of($expression) == 'list') {
				$first :nth($expression, 1);

				@each $member in $expression {
					@if (($member) != $first) {
						@each $partial in $result {
							$result : join($result, str-replace-first($first, $member, $partial))
						}
					}
				}
			}
		}
	}

	@return $result;
}



@function str-replace-first($search, $replace, $subject){
	$search-start : str-index($subject, $search);

	@if $search-start == null {
		@return $subject;
	}

	$result : str-slice($subject, 0, $search-start - 1);
	$result : $result + $replace;
	$result : $result + str-slice($subject, $search-start + str-length($search));


	@return $result;
}


@mixin media($conditions...) {
	@for $i from 1 through length($conditions) {
		$conditions : set-nth($conditions, $i, parse-expression(nth($conditions, $i)))
	}

	$branches : get-query-branches($conditions);
	$query : '';

	@each $brach in $branches {
		@if(str-length($query) != 0) {
			$query : $query + ',';
		}

		$query : $query + $brach;
	}

	@media #{$query} {
		@content;
	}
}
